(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var animationSpeed = 2;
var isRunning = false;
var previous = undefined;

module.exports = {
  get animationSpeed() {
    return animationSpeed;
  },
  set animationSpeed(speed) {
    animationSpeed = speed;
  },
  addObserver: addObserver,
  removeObserver: removeObserver,
  start: start,
  stop: stop,
  toggle: toggle
};

var observers = [];
var animate = window.requestAnimationFrame;

function addObserver(fn) {
  observers.push(fn);
  return fn;
}

function notifyObservers(duration) {
  _.forEach(observers, function (o) {
    return o(duration);
  });
}

function removeObserver(fn) {
  _.without(observers, fn);
}

function start() {
  if (isRunning) return;
  isRunning = true;
  previous = null;
  animate(tick);
}

function stop() {
  isRunning = false;
  previous = null;
}

function tick(end) {
  if (previous === null) {
    previous = end;
  }
  var duration = (end - previous) / (1000 / 60);
  previous = end;
  notifyObservers(duration / (10 / animationSpeed));
  if (isRunning) animate(tick);
}

function toggle() {
  if (isRunning) stop();else start();
}

},{"lodash":"lodash"}],2:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    randomcolor = require('randomcolor');

module.exports = function buildPlanet(width, height, _size_) {

  var color = randomcolor();
  var size = _size_ || _.random(5, 20, true);
  var speedX = _.random(-5, 5);
  var speedY = _.random(-5, 5);
  var prevSpeedX = speedX;
  var prevSpeedY = speedY;

  var newPlanet = {
    get color() {
      return color;
    },
    get mass() {
      return size * size * size;
    },
    get size() {
      return size;
    },
    prevSpeedX: prevSpeedX,
    prevSpeedY: prevSpeedY,
    speedX: speedX,
    speedY: speedY,

    x: _.random(width),
    y: _.random(height)
  };

  return newPlanet;
};

},{"lodash":"lodash","randomcolor":"randomcolor"}],3:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var frictionConstant = undefined;
module.exports = function calculateFrictionOnCicrcles(circles, _frictionConstant_) {
  frictionConstant = _frictionConstant_;
  _.forEach(circles, calculateFrictionOnCicrcle);
};

function calculateFrictionOnCicrcle(circle) {
  var frictionX = frictionConstant * circle.speedX;
  var frictionY = frictionConstant * circle.speedY;
  var accX = frictionX / circle.mass;
  var accY = frictionY / circle.mass;

  var newXSpeed = circle.speedX - accX;
  circle.speedX = newXSpeed;

  var newYSpeed = circle.speedY - accY;
  circle.speedY = newYSpeed;
}

},{"lodash":"lodash"}],4:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var gravityConstant = undefined;
module.exports = function calculateSpeedForGravityOnCircles(circles, _gravityConstant_) {
  gravityConstant = _gravityConstant_ / 10;
  _.forEach(circles, function (c) {
    return calculateSpeedForGravityOnCircle(c, circles);
  });
};

function calculateSpeedForGravityOnCircle(circle, circles) {
  var circleA = circle;
  _.forEach(circles, function (circleB) {
    return calcGravityBetweenAAndB(circleA, circleB);
  });
}

function calcGravityBetweenAAndB(circleA, circleB) {
  if (circleA === circleB) return;

  var xDistance = circleA.x - circleB.x;
  var yDistance = circleA.y - circleB.y;
  var distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));

  if (distance < circleA.size + circleB.size) {
    return;
  }

  var direction = {
    x: xDistance / distance,
    y: yDistance / distance
  };
  var gravityForce = gravityConstant * (circleA.mass * circleB.mass) / Math.pow(distance, 2);
  var xAccA = gravityForce * direction.x / circleA.mass;
  var yAccA = gravityForce * direction.y / circleA.mass;
  circleA.speedX -= xAccA;
  circleA.speedY -= yAccA;
}

},{"lodash":"lodash"}],5:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    windowDimension = require('./windowDimensionObservable');

module.exports = function calculateNewPositionForCircles(circles, frameDelta) {
  _.forEach(circles, function (c) {
    return calculateNewPositionForCircle(c, frameDelta);
  });
};

function calculateNewPositionForCircle(circle, frameDelta) {
  var deltaX = (circle.speedX + circle.prevSpeedX) / 2;
  var deltaY = (circle.speedY + circle.prevSpeedY) / 2;
  circle.prevSpeedX = circle.speedX;
  circle.prevSpeedY = circle.speedY;
  circle.x = circle.x + deltaX * frameDelta;
  circle.y = circle.y + deltaY * frameDelta;

  repositionIfOutsideOfCanvas(circle);
}

function repositionIfOutsideOfCanvas(circle) {
  if (circle.x > windowDimension.width + circle.size + 1) circle.x = -circle.size;
  if (circle.x < -circle.size - 1) circle.x = windowDimension.width + circle.size;

  if (circle.y > windowDimension.height + circle.size + 1) circle.y = -circle.size;
  if (circle.y < -circle.size - 1) circle.y = windowDimension.height + circle.size;
}

},{"./windowDimensionObservable":8,"lodash":"lodash"}],6:[function(require,module,exports){
'use strict';

var windowDimension = require('./windowDimensionObservable');

module.exports = {
  get context() {
    return context;
  },
  clear: clear,
  init: init,
  renderCircles: renderCircles
};

var canvas = document.createElement('canvas'),
    context = canvas.getContext("2d");

windowDimension.addObserver(updateCanvasDimensions);

function clear() {
  context.clearRect(0, 0, canvas.width, canvas.height);
}

function init(parentNode) {
  updateCanvasDimensions();
  parentNode.appendChild(canvas);
}

function renderCircles(circles) {
  _.forEach(circles, renderCircle);
}

function renderCircle(circle) {
  context.beginPath();
  context.arc(circle.x, circle.y, circle.size, 0, 2 * Math.PI);
  context.fillStyle = circle.color;
  context.fill();
}

function updateCanvasDimensions() {
  canvas.width = windowDimension.width;
  canvas.height = windowDimension.height;
}

},{"./windowDimensionObservable":8}],7:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    animation = require('./animationObservable'),
    calculateFriction = require('./calculateFriction'),
    calculateGravity = require('./calculateGravity'),
    calculateNewPosition = require('./calculateNewPosition'),
    canvas = require('./canvas'),
    buildPlanet = require('./buildPlanet'),
    windowDimension = require('./windowDimensionObservable');

var animateCheckbox = document.getElementById('animate-checkbox'),
    animationSpeedInput = document.getElementById('animation-speed'),
    frictionConstInput = document.getElementById('friction-constant'),
    gravityConstInput = document.getElementById('gravity-constant'),
    planetCountInput = document.getElementById('planet-count-input'),
    resetButton = document.getElementById('reset-button');

var planets = [];
var planetCount = undefined,
    animationSpeed = undefined,
    isAnimating = undefined,
    frictionConst = undefined,
    gravityConst = undefined;

animateCheckbox.addEventListener('change', updateSettings);
animationSpeedInput.addEventListener('keydown', function (e) {
  if (animationSpeedInput.value === '') return;
  if (e.keyCode === 38) animationSpeed += 0.5;
  if (e.keyCode === 40) animationSpeed -= 0.5;
  if (e.keyCode === 38 || e.keyCode === 40) {
    animationSpeedInput.value = parseFloat(animationSpeed);
    e.preventDefault();
  }
  updateSettings();
});
frictionConstInput.addEventListener('keydown', function (e) {
  if (frictionConstInput.value === '') return;
  if (e.keyCode === 38) frictionConst += 0.5;
  if (e.keyCode === 40) frictionConst -= 0.5;
  if (e.keyCode === 38 || e.keyCode === 40) {
    frictionConstInput.value = parseFloat(frictionConst);
    e.preventDefault();
  }
  updateSettings();
});
gravityConstInput.addEventListener('keydown', function (e) {
  if (gravityConstInput.value === '') return;
  if (e.keyCode === 38) gravityConst += 0.5;
  if (e.keyCode === 40) gravityConst -= 0.5;
  if (e.keyCode === 38 || e.keyCode === 40) {
    gravityConstInput.value = parseFloat(gravityConst);
    e.preventDefault();
  }
  updateSettings();
});
planetCountInput.addEventListener('keydown', function (e) {
  if (planetCountInput.value === '') return;
  if (e.keyCode === 38) planetCount += 1;
  if (e.keyCode === 40) planetCount -= 1;
  if (e.keyCode === 38 || e.keyCode === 40) {
    planetCountInput.value = parseFloat(planetCount);
    e.preventDefault();
  }
  resetSettings();
});
resetButton.addEventListener('click', resetSettings);

canvas.init(document.body);
animation.addObserver(onTick);
resetSettings();

function onTick(frameDelta) {
  calculateGravity(planets, gravityConst);
  calculateFriction(planets, frictionConst);
  calculateNewPosition(planets, frameDelta);
  canvas.clear();
  canvas.renderCircles(planets);
}

function updateSettings() {
  updateAnimation();
  updateAnimationSpeed();
  updateFriction();
  updateGravity();
}

function resetSettings() {
  updateCount();
  updateSettings();
}

function updateCount() {
  planetCount = parseFloat(planetCountInput.value);
  planets = [];
  for (var i = 0; i < planetCount; i++) {
    planets.push(buildPlanet(windowDimension.width, windowDimension.height));
  }
}

function updateAnimation() {
  var isChecked = animateCheckbox.checked;
  if (isChecked) animation.start();else animation.stop();
}

function updateAnimationSpeed() {
  animationSpeed = parseFloat(animationSpeedInput.value);
  animation.animationSpeed = animationSpeed;
}

function updateFriction() {
  frictionConst = parseFloat(frictionConstInput.value);
}

function updateGravity() {
  gravityConst = parseFloat(gravityConstInput.value);
}

},{"./animationObservable":1,"./buildPlanet":2,"./calculateFriction":3,"./calculateGravity":4,"./calculateNewPosition":5,"./canvas":6,"./windowDimensionObservable":8,"lodash":"lodash"}],8:[function(require,module,exports){
'use strict';

var _ = require('lodash');

module.exports = {
  get height() {
    return height;
  },
  get width() {
    return width;
  },
  addObserver: addObserver,
  removeObserver: removeObserver
};

var observers = [];

var height = undefined,
    width = undefined;
updateDimensions();
attachHandler();

function attachHandler() {
  window.addEventListener('resize', _.debounce(handleResize, 200));
}

function addObserver(fn) {
  observers.push(fn);
  return fn;
}

function removeObserver(fn) {
  _.without(observers, fn);
}

function notifyObservers() {
  _.forEach(observers, function (o) {
    return o();
  });
}

function handleResize(e) {
  updateDimensions();
  notifyObservers();
}

function updateDimensions() {
  height = window.innerHeight;
  width = window.innerWidth;
}

},{"lodash":"lodash"}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXGFuaW1hdGlvbk9ic2VydmFibGUuanMiLCJzcmNcXGJ1aWxkUGxhbmV0LmpzIiwic3JjXFxjYWxjdWxhdGVGcmljdGlvbi5qcyIsInNyY1xcY2FsY3VsYXRlR3Jhdml0eS5qcyIsInNyY1xcY2FsY3VsYXRlTmV3UG9zaXRpb24uanMiLCJzcmNcXGNhbnZhcy5qcyIsInNyY1xcbWFpbi5qcyIsInNyY1xcd2luZG93RGltZW5zaW9uT2JzZXJ2YWJsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBTSxJQUFJLFFBQVEsUUFBUixDQUFKOztBQUVOLElBQUksaUJBQWlCLENBQWpCO0FBQ0osSUFBSSxZQUFZLEtBQVo7QUFDSixJQUFJLG9CQUFKOztBQUVBLE9BQU8sT0FBUCxHQUFpQjtBQUNmLE1BQUksY0FBSixHQUFxQjtBQUFFLFdBQU8sY0FBUCxDQUFGO0dBQXJCO0FBQ0EsTUFBSSxjQUFKLENBQW1CLEtBQW5CLEVBQTBCO0FBQUUscUJBQWlCLEtBQWpCLENBQUY7R0FBMUI7QUFDQSwwQkFIZTtBQUlmLGdDQUplO0FBS2YsY0FMZTtBQU1mLFlBTmU7QUFPZixnQkFQZTtDQUFqQjs7QUFVQSxJQUFNLFlBQVksRUFBWjtBQUNOLElBQU0sVUFBVSxPQUFPLHFCQUFQOztBQUVoQixTQUFTLFdBQVQsQ0FBcUIsRUFBckIsRUFBeUI7QUFDdkIsWUFBVSxJQUFWLENBQWUsRUFBZixFQUR1QjtBQUV2QixTQUFPLEVBQVAsQ0FGdUI7Q0FBekI7O0FBS0EsU0FBUyxlQUFULENBQXlCLFFBQXpCLEVBQW1DO0FBQ2pDLElBQUUsT0FBRixDQUFVLFNBQVYsRUFBcUI7V0FBSyxFQUFFLFFBQUY7R0FBTCxDQUFyQixDQURpQztDQUFuQzs7QUFJQSxTQUFTLGNBQVQsQ0FBd0IsRUFBeEIsRUFBNEI7QUFDMUIsSUFBRSxPQUFGLENBQVUsU0FBVixFQUFxQixFQUFyQixF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Qjs7QUFPQSxJQUFNLFlBQVksRUFBWjs7QUFFTixJQUFJLGtCQUFKO0lBQVksaUJBQVo7QUFDQTtBQUNBOztBQUVBLFNBQVMsYUFBVCxHQUF5QjtBQUN2QixTQUFPLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLEVBQUUsUUFBRixDQUFXLFlBQVgsRUFBeUIsR0FBekIsQ0FBbEMsRUFEdUI7Q0FBekI7O0FBSUEsU0FBUyxXQUFULENBQXFCLEVBQXJCLEVBQXlCO0FBQ3ZCLFlBQVUsSUFBVixDQUFlLEVBQWYsRUFEdUI7QUFFdkIsU0FBTyxFQUFQLENBRnVCO0NBQXpCOztBQUtBLFNBQVMsY0FBVCxDQUF3QixFQUF4QixFQUE0QjtBQUMxQixJQUFFLE9BQUYsQ0FBVSxTQUFWLEVBQXFCLEVBQXJCLEVBRDBCO0NBQTVCOztBQUlBLFNBQVMsZUFBVCxHQUEyQjtBQUN6QixJQUFFLE9BQUYsQ0FBVSxTQUFWLEVBQXFCO1dBQUs7R0FBTCxDQUFyQixDQUR5QjtDQUEzQjs7QUFJQSxTQUFTLFlBQVQsQ0FBc0IsQ0FBdEIsRUFBeUI7QUFDdkIscUJBRHVCO0FBRXZCLG9CQUZ1QjtDQUF6Qjs7QUFLQSxTQUFTLGdCQUFULEdBQTRCO0FBQzFCLFdBQVMsT0FBTyxXQUFQLENBRGlCO0FBRTFCLFVBQVEsT0FBTyxVQUFQLENBRmtCO0NBQTVCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxuXHJcbmxldCBhbmltYXRpb25TcGVlZCA9IDI7XHJcbmxldCBpc1J1bm5pbmcgPSBmYWxzZTtcclxubGV0IHByZXZpb3VzO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0IGFuaW1hdGlvblNwZWVkKCkgeyByZXR1cm4gYW5pbWF0aW9uU3BlZWQ7IH0sXHJcbiAgc2V0IGFuaW1hdGlvblNwZWVkKHNwZWVkKSB7IGFuaW1hdGlvblNwZWVkID0gc3BlZWQ7IH0sXHJcbiAgYWRkT2JzZXJ2ZXIsXHJcbiAgcmVtb3ZlT2JzZXJ2ZXIsXHJcbiAgc3RhcnQsXHJcbiAgc3RvcCxcclxuICB0b2dnbGVcclxufTtcclxuXHJcbmNvbnN0IG9ic2VydmVycyA9IFtdO1xyXG5jb25zdCBhbmltYXRlID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcclxuXHJcbmZ1bmN0aW9uIGFkZE9ic2VydmVyKGZuKSB7XHJcbiAgb2JzZXJ2ZXJzLnB1c2goZm4pO1xyXG4gIHJldHVybiBmbjtcclxufVxyXG5cclxuZnVuY3Rpb24gbm90aWZ5T2JzZXJ2ZXJzKGR1cmF0aW9uKSB7XHJcbiAgXy5mb3JFYWNoKG9ic2VydmVycywgbyA9PiBvKGR1cmF0aW9uKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZU9ic2VydmVyKGZuKSB7XHJcbiAgXy53aXRob3V0KG9ic2VydmVycywgZm4pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFydCgpIHtcclxuICBpZihpc1J1bm5pbmcpIHJldHVybjtcclxuICBpc1J1bm5pbmcgPSB0cnVlO1xyXG4gIHByZXZpb3VzID0gbnVsbDtcclxuICBhbmltYXRlKHRpY2spO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9wKCkge1xyXG4gIGlzUnVubmluZyA9IGZhbHNlO1xyXG4gIHByZXZpb3VzID0gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gdGljayhlbmQpIHtcclxuICBpZihwcmV2aW91cyA9PT0gbnVsbCkge1xyXG4gICAgcHJldmlvdXMgPSBlbmQ7XHJcbiAgfVxyXG4gIGxldCBkdXJhdGlvbiA9IChlbmQgLSBwcmV2aW91cykgLyAoMTAwMCAvIDYwKTtcclxuICBwcmV2aW91cyA9IGVuZDtcclxuICBub3RpZnlPYnNlcnZlcnMoZHVyYXRpb24gLyAoMTAgLyBhbmltYXRpb25TcGVlZCkpO1xyXG4gIGlmKGlzUnVubmluZykgYW5pbWF0ZSh0aWNrKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlKCkge1xyXG4gIGlmKGlzUnVubmluZykgc3RvcCgpO1xyXG4gIGVsc2Ugc3RhcnQoKTtcclxufVxyXG4iLCJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyksXHJcbiAgICAgIHJhbmRvbWNvbG9yID0gcmVxdWlyZSgncmFuZG9tY29sb3InKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRQbGFuZXQod2lkdGgsIGhlaWdodCwgX3NpemVfKSB7XHJcblxyXG4gIGxldCBjb2xvciA9IHJhbmRvbWNvbG9yKCk7XHJcbiAgbGV0IHNpemUgPSBfc2l6ZV8gfHwgXy5yYW5kb20oNSwgMjAsIHRydWUpO1xyXG4gIGxldCBzcGVlZFggPSBfLnJhbmRvbSgtNSwgNSk7XHJcbiAgbGV0IHNwZWVkWSA9IF8ucmFuZG9tKC01LCA1KTtcclxuICBsZXQgcHJldlNwZWVkWCA9IHNwZWVkWDtcclxuICBsZXQgcHJldlNwZWVkWSA9IHNwZWVkWTtcclxuXHJcbiAgbGV0IG5ld1BsYW5ldCA9IHtcclxuICAgIGdldCBjb2xvcigpIHsgcmV0dXJuIGNvbG9yOyB9LFxyXG4gICAgZ2V0IG1hc3MoKSB7IHJldHVybiBzaXplICogc2l6ZSAqIHNpemU7IH0sXHJcbiAgICBnZXQgc2l6ZSgpIHsgcmV0dXJuIHNpemU7IH0sXHJcbiAgICBwcmV2U3BlZWRYLFxyXG4gICAgcHJldlNwZWVkWSxcclxuICAgIHNwZWVkWCxcclxuICAgIHNwZWVkWSxcclxuXHJcbiAgICB4OiBfLnJhbmRvbSh3aWR0aCksXHJcbiAgICB5OiBfLnJhbmRvbShoZWlnaHQpXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIG5ld1BsYW5ldDtcclxufTtcclxuIiwiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5cclxubGV0IGZyaWN0aW9uQ29uc3RhbnQ7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsY3VsYXRlRnJpY3Rpb25PbkNpY3JjbGVzKGNpcmNsZXMsIF9mcmljdGlvbkNvbnN0YW50Xykge1xyXG4gIGZyaWN0aW9uQ29uc3RhbnQgPSBfZnJpY3Rpb25Db25zdGFudF87XHJcbiAgXy5mb3JFYWNoKGNpcmNsZXMsIGNhbGN1bGF0ZUZyaWN0aW9uT25DaWNyY2xlKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZUZyaWN0aW9uT25DaWNyY2xlKGNpcmNsZSkge1xyXG4gIGxldCBmcmljdGlvblggPSBmcmljdGlvbkNvbnN0YW50ICogY2lyY2xlLnNwZWVkWDtcclxuICBsZXQgZnJpY3Rpb25ZID0gZnJpY3Rpb25Db25zdGFudCAqIGNpcmNsZS5zcGVlZFk7XHJcbiAgbGV0IGFjY1ggPSBmcmljdGlvblggLyBjaXJjbGUubWFzcztcclxuICBsZXQgYWNjWSA9IGZyaWN0aW9uWSAvIGNpcmNsZS5tYXNzO1xyXG5cclxuICBsZXQgbmV3WFNwZWVkID0gY2lyY2xlLnNwZWVkWCAtIGFjY1g7XHJcbiAgY2lyY2xlLnNwZWVkWCA9IG5ld1hTcGVlZDtcclxuXHJcbiAgbGV0IG5ld1lTcGVlZCA9IGNpcmNsZS5zcGVlZFkgLSBhY2NZO1xyXG4gIGNpcmNsZS5zcGVlZFkgPSBuZXdZU3BlZWQ7XHJcblxyXG59XHJcbiIsImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxuXHJcbmxldCBncmF2aXR5Q29uc3RhbnQ7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsY3VsYXRlU3BlZWRGb3JHcmF2aXR5T25DaXJjbGVzKGNpcmNsZXMsIF9ncmF2aXR5Q29uc3RhbnRfKSB7XHJcbiAgZ3Jhdml0eUNvbnN0YW50ID0gX2dyYXZpdHlDb25zdGFudF8gLyAxMDtcclxuICBfLmZvckVhY2goY2lyY2xlcywgYyA9PiBjYWxjdWxhdGVTcGVlZEZvckdyYXZpdHlPbkNpcmNsZShjLCBjaXJjbGVzKSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVTcGVlZEZvckdyYXZpdHlPbkNpcmNsZShjaXJjbGUsIGNpcmNsZXMpIHtcclxuICBsZXQgY2lyY2xlQSA9IGNpcmNsZTtcclxuICBfLmZvckVhY2goY2lyY2xlcywgY2lyY2xlQiA9PiBjYWxjR3Jhdml0eUJldHdlZW5BQW5kQihjaXJjbGVBLCBjaXJjbGVCKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNHcmF2aXR5QmV0d2VlbkFBbmRCKGNpcmNsZUEsIGNpcmNsZUIpIHtcclxuICBpZihjaXJjbGVBID09PSBjaXJjbGVCKSByZXR1cm47XHJcblxyXG4gIGxldCB4RGlzdGFuY2UgPSBjaXJjbGVBLnggLSBjaXJjbGVCLng7XHJcbiAgbGV0IHlEaXN0YW5jZSA9IGNpcmNsZUEueSAtIGNpcmNsZUIueTtcclxuICBsZXQgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeERpc3RhbmNlLCAyKSArIE1hdGgucG93KHlEaXN0YW5jZSwgMikpO1xyXG5cclxuICBpZihkaXN0YW5jZSA8IGNpcmNsZUEuc2l6ZSArIGNpcmNsZUIuc2l6ZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IGRpcmVjdGlvbiA9IHtcclxuICAgIHg6IHhEaXN0YW5jZSAvIGRpc3RhbmNlLFxyXG4gICAgeTogeURpc3RhbmNlIC8gZGlzdGFuY2VcclxuICB9O1xyXG4gIGxldCBncmF2aXR5Rm9yY2UgPSBncmF2aXR5Q29uc3RhbnQgKiAoY2lyY2xlQS5tYXNzICogY2lyY2xlQi5tYXNzKSAvIE1hdGgucG93KGRpc3RhbmNlLCAyKTtcclxuICBsZXQgeEFjY0EgPSBncmF2aXR5Rm9yY2UgKiBkaXJlY3Rpb24ueCAvIGNpcmNsZUEubWFzcztcclxuICBsZXQgeUFjY0EgPSBncmF2aXR5Rm9yY2UgKiBkaXJlY3Rpb24ueSAvIGNpcmNsZUEubWFzcztcclxuICBjaXJjbGVBLnNwZWVkWCAtPSB4QWNjQTtcclxuICBjaXJjbGVBLnNwZWVkWSAtPSB5QWNjQTtcclxufVxyXG4iLCJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyksXHJcbiAgICAgIHdpbmRvd0RpbWVuc2lvbiA9IHJlcXVpcmUoJy4vd2luZG93RGltZW5zaW9uT2JzZXJ2YWJsZScpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxjdWxhdGVOZXdQb3NpdGlvbkZvckNpcmNsZXMoY2lyY2xlcywgZnJhbWVEZWx0YSkge1xyXG4gIF8uZm9yRWFjaChjaXJjbGVzLCBjID0+IGNhbGN1bGF0ZU5ld1Bvc2l0aW9uRm9yQ2lyY2xlKGMsIGZyYW1lRGVsdGEpKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZU5ld1Bvc2l0aW9uRm9yQ2lyY2xlKGNpcmNsZSwgZnJhbWVEZWx0YSkge1xyXG4gIGxldCBkZWx0YVggPSAoY2lyY2xlLnNwZWVkWCArIGNpcmNsZS5wcmV2U3BlZWRYKSAvIDI7XHJcbiAgbGV0IGRlbHRhWSA9IChjaXJjbGUuc3BlZWRZICsgY2lyY2xlLnByZXZTcGVlZFkpIC8gMjtcclxuICBjaXJjbGUucHJldlNwZWVkWCA9IGNpcmNsZS5zcGVlZFg7XHJcbiAgY2lyY2xlLnByZXZTcGVlZFkgPSBjaXJjbGUuc3BlZWRZO1xyXG4gIGNpcmNsZS54ID0gY2lyY2xlLnggKyBkZWx0YVggKiBmcmFtZURlbHRhO1xyXG4gIGNpcmNsZS55ID0gY2lyY2xlLnkgKyBkZWx0YVkgKiBmcmFtZURlbHRhO1xyXG5cclxuICByZXBvc2l0aW9uSWZPdXRzaWRlT2ZDYW52YXMoY2lyY2xlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVwb3NpdGlvbklmT3V0c2lkZU9mQ2FudmFzKGNpcmNsZSkge1xyXG4gIGlmKGNpcmNsZS54ID4gd2luZG93RGltZW5zaW9uLndpZHRoICsgY2lyY2xlLnNpemUgKyAxKSBjaXJjbGUueCA9IC1jaXJjbGUuc2l6ZTtcclxuICBpZihjaXJjbGUueCA8IC1jaXJjbGUuc2l6ZSAtIDEpIGNpcmNsZS54ID0gd2luZG93RGltZW5zaW9uLndpZHRoICsgY2lyY2xlLnNpemU7XHJcblxyXG4gIGlmKGNpcmNsZS55ID4gd2luZG93RGltZW5zaW9uLmhlaWdodCArIGNpcmNsZS5zaXplICsgMSkgY2lyY2xlLnkgPSAtY2lyY2xlLnNpemU7XHJcbiAgaWYoY2lyY2xlLnkgPCAtY2lyY2xlLnNpemUgLTEpIGNpcmNsZS55ID0gd2luZG93RGltZW5zaW9uLmhlaWdodCArIGNpcmNsZS5zaXplO1xyXG59XHJcbiIsImNvbnN0IHdpbmRvd0RpbWVuc2lvbiA9IHJlcXVpcmUoJy4vd2luZG93RGltZW5zaW9uT2JzZXJ2YWJsZScpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0IGNvbnRleHQoKSB7IHJldHVybiBjb250ZXh0OyB9LFxyXG4gIGNsZWFyLFxyXG4gIGluaXQsXHJcbiAgcmVuZGVyQ2lyY2xlc1xyXG59O1xyXG5cclxuY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXHJcbiAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxud2luZG93RGltZW5zaW9uLmFkZE9ic2VydmVyKHVwZGF0ZUNhbnZhc0RpbWVuc2lvbnMpO1xyXG5cclxuZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdChwYXJlbnROb2RlKSB7XHJcbiAgdXBkYXRlQ2FudmFzRGltZW5zaW9ucygpO1xyXG4gIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyQ2lyY2xlcyhjaXJjbGVzKSB7XHJcbiAgXy5mb3JFYWNoKGNpcmNsZXMsIHJlbmRlckNpcmNsZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckNpcmNsZShjaXJjbGUpIHtcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuYXJjKGNpcmNsZS54LCBjaXJjbGUueSwgY2lyY2xlLnNpemUsIDAsIDIqTWF0aC5QSSk7XHJcbiAgY29udGV4dC5maWxsU3R5bGUgPSBjaXJjbGUuY29sb3I7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUNhbnZhc0RpbWVuc2lvbnMoKSB7XHJcbiAgY2FudmFzLndpZHRoID0gd2luZG93RGltZW5zaW9uLndpZHRoO1xyXG4gIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3dEaW1lbnNpb24uaGVpZ2h0O1xyXG59XHJcbiIsImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKSxcclxuICAgICAgYW5pbWF0aW9uID0gcmVxdWlyZSgnLi9hbmltYXRpb25PYnNlcnZhYmxlJyksXHJcbiAgICAgIGNhbGN1bGF0ZUZyaWN0aW9uID0gcmVxdWlyZSgnLi9jYWxjdWxhdGVGcmljdGlvbicpLFxyXG4gICAgICBjYWxjdWxhdGVHcmF2aXR5ID0gcmVxdWlyZSgnLi9jYWxjdWxhdGVHcmF2aXR5JyksXHJcbiAgICAgIGNhbGN1bGF0ZU5ld1Bvc2l0aW9uID0gcmVxdWlyZSgnLi9jYWxjdWxhdGVOZXdQb3NpdGlvbicpLFxyXG4gICAgICBjYW52YXMgPSByZXF1aXJlKCcuL2NhbnZhcycpLFxyXG4gICAgICBidWlsZFBsYW5ldCA9IHJlcXVpcmUoJy4vYnVpbGRQbGFuZXQnKSxcclxuICAgICAgd2luZG93RGltZW5zaW9uID0gcmVxdWlyZSgnLi93aW5kb3dEaW1lbnNpb25PYnNlcnZhYmxlJyk7XHJcblxyXG5jb25zdCBhbmltYXRlQ2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW5pbWF0ZS1jaGVja2JveCcpLFxyXG4gICAgICBhbmltYXRpb25TcGVlZElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FuaW1hdGlvbi1zcGVlZCcpLFxyXG4gICAgICBmcmljdGlvbkNvbnN0SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnJpY3Rpb24tY29uc3RhbnQnKSxcclxuICAgICAgZ3Jhdml0eUNvbnN0SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ3Jhdml0eS1jb25zdGFudCcpLFxyXG4gICAgICBwbGFuZXRDb3VudElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW5ldC1jb3VudC1pbnB1dCcpLFxyXG4gICAgICByZXNldEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNldC1idXR0b24nKTtcclxuXHJcbmxldCBwbGFuZXRzID0gW107XHJcbmxldCBwbGFuZXRDb3VudCwgYW5pbWF0aW9uU3BlZWQsIGlzQW5pbWF0aW5nLCBmcmljdGlvbkNvbnN0LCBncmF2aXR5Q29uc3Q7XHJcblxyXG5hbmltYXRlQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlU2V0dGluZ3MpO1xyXG5hbmltYXRpb25TcGVlZElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcclxuICBpZihhbmltYXRpb25TcGVlZElucHV0LnZhbHVlID09PSAnJykgcmV0dXJuO1xyXG4gIGlmKGUua2V5Q29kZSA9PT0gMzgpIGFuaW1hdGlvblNwZWVkICs9IDAuNTtcclxuICBpZihlLmtleUNvZGUgPT09IDQwKSBhbmltYXRpb25TcGVlZCAtPSAwLjU7XHJcbiAgaWYoZS5rZXlDb2RlID09PSAzOCB8fCBlLmtleUNvZGUgPT09IDQwKSB7XHJcbiAgICBhbmltYXRpb25TcGVlZElucHV0LnZhbHVlID0gcGFyc2VGbG9hdChhbmltYXRpb25TcGVlZCk7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG4gIHVwZGF0ZVNldHRpbmdzKCk7XHJcbn0pO1xyXG5mcmljdGlvbkNvbnN0SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xyXG4gIGlmKGZyaWN0aW9uQ29uc3RJbnB1dC52YWx1ZSA9PT0gJycpIHJldHVybjtcclxuICBpZihlLmtleUNvZGUgPT09IDM4KSBmcmljdGlvbkNvbnN0ICs9IDAuNTtcclxuICBpZihlLmtleUNvZGUgPT09IDQwKSBmcmljdGlvbkNvbnN0IC09IDAuNTtcclxuICBpZihlLmtleUNvZGUgPT09IDM4IHx8IGUua2V5Q29kZSA9PT0gNDApIHtcclxuICAgIGZyaWN0aW9uQ29uc3RJbnB1dC52YWx1ZSA9IHBhcnNlRmxvYXQoZnJpY3Rpb25Db25zdCk7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG4gIHVwZGF0ZVNldHRpbmdzKCk7XHJcbn0pO1xyXG5ncmF2aXR5Q29uc3RJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XHJcbiAgaWYoZ3Jhdml0eUNvbnN0SW5wdXQudmFsdWUgPT09ICcnKSByZXR1cm47XHJcbiAgaWYoZS5rZXlDb2RlID09PSAzOCkgZ3Jhdml0eUNvbnN0ICs9IDAuNTtcclxuICBpZihlLmtleUNvZGUgPT09IDQwKSBncmF2aXR5Q29uc3QgLT0gMC41O1xyXG4gIGlmKGUua2V5Q29kZSA9PT0gMzggfHwgZS5rZXlDb2RlID09PSA0MCkge1xyXG4gICAgZ3Jhdml0eUNvbnN0SW5wdXQudmFsdWUgPSBwYXJzZUZsb2F0KGdyYXZpdHlDb25zdCk7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG4gIHVwZGF0ZVNldHRpbmdzKCk7XHJcbn0pO1xyXG5wbGFuZXRDb3VudElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcclxuICBpZihwbGFuZXRDb3VudElucHV0LnZhbHVlID09PSAnJykgcmV0dXJuO1xyXG4gIGlmKGUua2V5Q29kZSA9PT0gMzgpIHBsYW5ldENvdW50ICs9IDE7XHJcbiAgaWYoZS5rZXlDb2RlID09PSA0MCkgcGxhbmV0Q291bnQgLT0gMTtcclxuICBpZihlLmtleUNvZGUgPT09IDM4IHx8IGUua2V5Q29kZSA9PT0gNDApIHtcclxuICAgIHBsYW5ldENvdW50SW5wdXQudmFsdWUgPSBwYXJzZUZsb2F0KHBsYW5ldENvdW50KTtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcbiAgcmVzZXRTZXR0aW5ncygpO1xyXG59KTtcclxucmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXNldFNldHRpbmdzKTtcclxuXHJcbmNhbnZhcy5pbml0KGRvY3VtZW50LmJvZHkpO1xyXG5hbmltYXRpb24uYWRkT2JzZXJ2ZXIob25UaWNrKTtcclxucmVzZXRTZXR0aW5ncygpO1xyXG5cclxuZnVuY3Rpb24gb25UaWNrKGZyYW1lRGVsdGEpIHtcclxuICBjYWxjdWxhdGVHcmF2aXR5KHBsYW5ldHMsIGdyYXZpdHlDb25zdCk7XHJcbiAgY2FsY3VsYXRlRnJpY3Rpb24ocGxhbmV0cywgZnJpY3Rpb25Db25zdCk7XHJcbiAgY2FsY3VsYXRlTmV3UG9zaXRpb24ocGxhbmV0cywgZnJhbWVEZWx0YSk7XHJcbiAgY2FudmFzLmNsZWFyKCk7XHJcbiAgY2FudmFzLnJlbmRlckNpcmNsZXMocGxhbmV0cyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVNldHRpbmdzKCkge1xyXG4gIHVwZGF0ZUFuaW1hdGlvbigpO1xyXG4gIHVwZGF0ZUFuaW1hdGlvblNwZWVkKCk7XHJcbiAgdXBkYXRlRnJpY3Rpb24oKTtcclxuICB1cGRhdGVHcmF2aXR5KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0U2V0dGluZ3MoKSB7XHJcbiAgdXBkYXRlQ291bnQoKTtcclxuICB1cGRhdGVTZXR0aW5ncygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVDb3VudCgpIHtcclxuICBwbGFuZXRDb3VudCA9IHBhcnNlRmxvYXQocGxhbmV0Q291bnRJbnB1dC52YWx1ZSk7XHJcbiAgcGxhbmV0cyA9IFtdO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBwbGFuZXRDb3VudDsgaSsrKSB7XHJcbiAgICBwbGFuZXRzLnB1c2goYnVpbGRQbGFuZXQod2luZG93RGltZW5zaW9uLndpZHRoLCB3aW5kb3dEaW1lbnNpb24uaGVpZ2h0KSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVBbmltYXRpb24oKSB7XHJcbiAgbGV0IGlzQ2hlY2tlZCA9IGFuaW1hdGVDaGVja2JveC5jaGVja2VkO1xyXG4gIGlmKGlzQ2hlY2tlZCkgYW5pbWF0aW9uLnN0YXJ0KCk7XHJcbiAgZWxzZSBhbmltYXRpb24uc3RvcCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVBbmltYXRpb25TcGVlZCgpIHtcclxuICBhbmltYXRpb25TcGVlZCA9IHBhcnNlRmxvYXQoYW5pbWF0aW9uU3BlZWRJbnB1dC52YWx1ZSk7XHJcbiAgYW5pbWF0aW9uLmFuaW1hdGlvblNwZWVkID0gYW5pbWF0aW9uU3BlZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUZyaWN0aW9uKCkge1xyXG4gIGZyaWN0aW9uQ29uc3QgPSBwYXJzZUZsb2F0KGZyaWN0aW9uQ29uc3RJbnB1dC52YWx1ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUdyYXZpdHkoKSB7XHJcbiAgZ3Jhdml0eUNvbnN0ID0gcGFyc2VGbG9hdChncmF2aXR5Q29uc3RJbnB1dC52YWx1ZSk7XHJcbn1cclxuIiwiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0IGhlaWdodCgpIHsgcmV0dXJuIGhlaWdodDsgfSxcclxuICBnZXQgd2lkdGgoKSB7IHJldHVybiB3aWR0aDsgfSxcclxuICBhZGRPYnNlcnZlcixcclxuICByZW1vdmVPYnNlcnZlclxyXG59O1xyXG5cclxuY29uc3Qgb2JzZXJ2ZXJzID0gW107XHJcblxyXG5sZXQgaGVpZ2h0LCB3aWR0aDtcclxudXBkYXRlRGltZW5zaW9ucygpO1xyXG5hdHRhY2hIYW5kbGVyKCk7XHJcblxyXG5mdW5jdGlvbiBhdHRhY2hIYW5kbGVyKCkge1xyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfLmRlYm91bmNlKGhhbmRsZVJlc2l6ZSwgMjAwKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZE9ic2VydmVyKGZuKSB7XHJcbiAgb2JzZXJ2ZXJzLnB1c2goZm4pO1xyXG4gIHJldHVybiBmbjtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIoZm4pIHtcclxuICBfLndpdGhvdXQob2JzZXJ2ZXJzLCBmbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vdGlmeU9ic2VydmVycygpIHtcclxuICBfLmZvckVhY2gob2JzZXJ2ZXJzLCBvID0+IG8oKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVJlc2l6ZShlKSB7XHJcbiAgdXBkYXRlRGltZW5zaW9ucygpO1xyXG4gIG5vdGlmeU9ic2VydmVycygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVEaW1lbnNpb25zKCkge1xyXG4gIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG59XHJcbiJdfQ==
