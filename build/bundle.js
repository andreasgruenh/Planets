(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _ = require('lodash');

module.exports = {
  addObserver: addObserver,
  removeObserver: removeObserver,
  start: start,
  stop: stop,
  toggle: toggle
};

var observers = [];
var animate = window.requestAnimationFrame;

var isRunning = false;
var previous = undefined;

function addObserver(fn) {
  observers.push(fn);
  return fn;
}

function notifyObservers(duration) {
  _.forEach(observers, function (o) {
    return o(duration);
  });
}

function removeObserver(fn) {
  _.without(observers, fn);
}

function start() {
  if (isRunning) return;
  isRunning = true;
  previous = null;
  animate(tick);
}

function stop() {
  isRunning = false;
  previous = null;
}

function tick(end) {
  if (previous === null) {
    previous = end;
  }
  var duration = (end - previous) / (1000 / 60);
  previous = end;
  notifyObservers(duration);
  if (isRunning) animate(tick);
}

function toggle() {
  if (isRunning) stop();else start();
}

},{"lodash":"lodash"}],2:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    randomcolor = require('randomcolor');

module.exports = function buildPlanet(width, height) {

  var color = randomcolor();
  var size = _.random(5, 20, true);
  var speedX = _.random(-5, 5);
  var speedY = _.random(-5, 5);
  var prevSpeedX = speedX;
  var prevSpeedY = speedY;

  var newPlanet = {
    get color() {
      return color;
    },
    get mass() {
      return size * size * size;
    },
    get prevSpeedX() {
      return prevSpeedX;
    },
    get prevSpeedY() {
      return prevSpeedY;
    },
    get size() {
      return size;
    },
    get speedX() {
      return speedX;
    },
    set speedX(newSpeed) {
      prevSpeedX = speedX;
      speedX = newSpeed;
    },
    get speedY() {
      return speedY;
    },
    set speedY(newSpeed) {
      prevSpeedY = speedY;
      speedY = newSpeed;
    },

    x: _.random(width),
    y: _.random(height)
  };

  return newPlanet;
};

},{"lodash":"lodash","randomcolor":"randomcolor"}],3:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var frictionConstant = undefined;
module.exports = function calculateFrictionOnCicrcles(circles, _frictionConstant_) {
  frictionConstant = _frictionConstant_;
  _.forEach(circles, calculateFrictionOnCicrcle);
};

function calculateFrictionOnCicrcle(circle) {
  var frictionX = frictionConstant * circle.speedX;
  var frictionY = frictionConstant * circle.speedY;
  var accX = frictionX / circle.mass;
  var accY = frictionY / circle.mass;

  var newXSpeed = circle.speedX - accX;
  circle.speedX = newXSpeed;

  var newYSpeed = circle.speedY - accY;
  circle.speedY = newYSpeed;
}

},{"lodash":"lodash"}],4:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var gravityConstant = undefined;
module.exports = function calculateSpeedForGravityOnCircles(circles, _gravityConstant_) {
  gravityConstant = _gravityConstant_;
  _.forEach(circles, function (c) {
    return calculateSpeedForGravityOnCircle(c, circles);
  });
};

function calculateSpeedForGravityOnCircle(circle, circles) {
  var circleA = circle;
  _.forEach(circles, function (circleB) {
    return calcGravityBetweenAAndB(circleA, circleB);
  });
}

function calcGravityBetweenAAndB(circleA, circleB) {
  if (circleA === circleB) return;

  var xDistance = circleA.x - circleB.x;
  var yDistance = circleA.y - circleB.y;
  var distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));

  if (distance < circleA.size + circleB.size) {
    return;
  }

  var direction = {
    x: xDistance / distance,
    y: yDistance / distance
  };
  var gravityForce = gravityConstant * (circleA.mass * circleB.mass) / Math.pow(distance, 2);
  var xAccA = gravityForce * direction.x / circleA.mass;
  var yAccA = gravityForce * direction.y / circleB.mass;
  circleA.speedX -= xAccA;
  circleA.speedY -= yAccA;
}

},{"lodash":"lodash"}],5:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    windowDimension = require('./windowDimensionObservable');

module.exports = function calculateNewPositionForCircles(circles, frameDelta) {
  _.forEach(circles, function (c) {
    return calculateNewPositionForCircle(c, frameDelta);
  });
};

function calculateNewPositionForCircle(circle, frameDelta) {
  var deltaX = (circle.speedX + circle.prevSpeedX) / 2;
  var deltaY = (circle.speedY + circle.prevSpeedY) / 2;
  circle.x = circle.x + deltaX * frameDelta;
  circle.y = circle.y + deltaY * frameDelta;

  repositionIfOutsideOfCanvas(circle);
}

function repositionIfOutsideOfCanvas(circle) {
  if (circle.x > windowDimension.width + 45) circle.x = -40;
  if (circle.x < -45) circle.x = windowDimension.width + 40;

  if (circle.y > windowDimension.height + 45) circle.y = -40;
  if (circle.y < -45) circle.y = windowDimension.height + 40;
}

},{"./windowDimensionObservable":8,"lodash":"lodash"}],6:[function(require,module,exports){
'use strict';

var windowDimension = require('./windowDimensionObservable');

module.exports = {
  get context() {
    return context;
  },
  clear: clear,
  init: init,
  renderCircles: renderCircles
};

var canvas = document.createElement('canvas'),
    context = canvas.getContext("2d");

windowDimension.addObserver(updateCanvasDimensions);

function clear() {
  context.clearRect(0, 0, canvas.width, canvas.height);
}

function init(parentNode) {
  updateCanvasDimensions();
  parentNode.appendChild(canvas);
}

function renderCircles(circles) {
  _.forEach(circles, renderCircle);
}

function renderCircle(circle) {
  context.beginPath();
  context.arc(circle.x, circle.y, circle.size, 0, 2 * Math.PI);
  context.fillStyle = circle.color;
  context.fill();
}

function updateCanvasDimensions() {
  canvas.width = windowDimension.width;
  canvas.height = windowDimension.height;
}

},{"./windowDimensionObservable":8}],7:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    animation = require('./animationObservable'),
    calculateFriction = require('./calculateFriction'),
    calculateGravity = require('./calculateGravity'),
    calculateNewPosition = require('./calculateNewPosition'),
    canvas = require('./canvas'),
    buildPlanet = require('./buildPlanet'),
    windowDimension = require('./windowDimensionObservable');

var animateCheckbox = document.getElementById('animate-checkbox'),
    frictionConstInput = document.getElementById('friction-constant'),
    gravityConstInput = document.getElementById('gravity-constant'),
    planetCountInput = document.getElementById('planet-count-input'),
    resetButton = document.getElementById('reset-button');

var planets = [];
var planetCount = undefined,
    isAnimating = undefined,
    frictionConst = undefined,
    gravityConst = undefined;

animateCheckbox.addEventListener('change', updateSettings);
frictionConstInput.addEventListener('keydown', function (e) {
  if (frictionConstInput.value === '') return;
  if (e.keyCode === 38) frictionConst += 0.5;
  if (e.keyCode === 40) frictionConst -= 0.5;
  if (e.keyCode === 38 || e.keyCode === 40) {
    frictionConstInput.value = parseFloat(frictionConst);
    e.preventDefault();
  }
  updateSettings();
});
gravityConstInput.addEventListener('keydown', function (e) {
  if (gravityConstInput.value === '') return;
  if (e.keyCode === 38) gravityConst += 0.5;
  if (e.keyCode === 40) gravityConst -= 0.5;
  if (e.keyCode === 38 || e.keyCode === 40) {
    gravityConstInput.value = parseFloat(gravityConst);
    e.preventDefault();
  }
  updateSettings();
});
planetCountInput.addEventListener('keydown', function (e) {
  if (planetCountInput.value === '') return;
  if (e.keyCode === 38) planetCount += 1;
  if (e.keyCode === 40) planetCount -= 1;
  if (e.keyCode === 38 || e.keyCode === 40) {
    planetCountInput.value = parseFloat(planetCount);
    e.preventDefault();
  }
  resetSettings();
});
resetButton.addEventListener('click', resetSettings);

canvas.init(document.body);
animation.addObserver(onTick);
resetSettings();

function onTick(frameDelta) {
  calculateGravity(planets, gravityConst);
  calculateFriction(planets, frictionConst);
  calculateNewPosition(planets, frameDelta);
  canvas.clear();
  canvas.renderCircles(planets);
}

function updateSettings() {
  updateAnimation();
  updateFriction();
  updateGravity();
}

function resetSettings() {
  updateCount();
  updateSettings();
}

function updateCount() {
  planetCount = parseFloat(planetCountInput.value);
  planets = [];
  for (var i = 0; i < planetCount; i++) {
    planets.push(buildPlanet(windowDimension.width, windowDimension.height));
  }
}

function updateAnimation() {
  var isChecked = animateCheckbox.checked;
  if (isChecked) animation.start();else animation.stop();
}

function updateFriction() {
  frictionConst = parseFloat(frictionConstInput.value);
}

function updateGravity() {
  gravityConst = parseFloat(gravityConstInput.value);
}

},{"./animationObservable":1,"./buildPlanet":2,"./calculateFriction":3,"./calculateGravity":4,"./calculateNewPosition":5,"./canvas":6,"./windowDimensionObservable":8,"lodash":"lodash"}],8:[function(require,module,exports){
'use strict';

var _ = require('lodash');

module.exports = {
  get height() {
    return height;
  },
  get width() {
    return width;
  },
  addObserver: addObserver,
  removeObserver: removeObserver
};

var observers = [];

var height = undefined,
    width = undefined;
updateDimensions();
attachHandler();

function attachHandler() {
  window.addEventListener('resize', _.debounce(handleResize, 200));
}

function addObserver(fn) {
  observers.push(fn);
  return fn;
}

function removeObserver(fn) {
  _.without(observers, fn);
}

function notifyObservers() {
  _.forEach(observers, function (o) {
    return o();
  });
}

function handleResize(e) {
  updateDimensions();
  notifyObservers();
}

function updateDimensions() {
  height = window.innerHeight;
  width = window.innerWidth;
}

},{"lodash":"lodash"}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
